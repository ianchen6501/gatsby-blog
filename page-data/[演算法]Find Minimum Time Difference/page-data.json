{"componentChunkName":"component---src-templates-post-js","path":"/[演算法]Find Minimum Time Difference/","result":{"data":{"markdownRemark":{"html":"<h3>題目</h3>\n<p>給定一個陣列裡面包含<code>\"HH:MM\"</code> 型式的 string，找出其中時間距離最短的兩個時間並回傳相隔的時間(以分鐘表示)。\r\ninput: [\"00:03\", \"23:59\", \"12:03\"]\r\noutput: 4</p>\n<h3>思路</h3>\n<p>一開始不太確定 string type 要怎麼計算時間差距，所以想到可否利用 Date() 來計算差距， Date 還很聰明的可以計算並回傳毫秒數。\r\n一開始想利用 for loop 來對每個陣列 item 做計算，並利用 filter 來排除與 item 自身相同的值，這樣其實會讓演算法排除兩個同樣的時間的狀況導致我後來要另外寫一個 function 來考慮 edge case。</p>\n<h3>自己的解法</h3>\n<pre><code class=\"language-js\">const timeDifference = times => {\r\n  function changeToDate(time) {\r\n    const hour = parseInt(time.split(\":\")[0])\r\n    const minute = parseInt(time.split(\":\")[1])\r\n    return new Date(2021, 5, 18, hour, minute)\r\n  }\r\n\r\n  function changeToMinute(milisec) {\r\n    return milisec / 60000\r\n  }\r\n\r\n  //找相同的\r\n  let isSameTime = false\r\n  function checkIsSametime(time) {\r\n    let indices = []\r\n    let idx = times.indexOf(time)\r\n    while (idx !== -1) {\r\n      indices.push(idx)\r\n      idx = times.indexOf(time, idx + 1)\r\n    }\r\n    if (indices.length > 1) {\r\n      isSameTime = true\r\n    }\r\n  }\r\n  checkIsSametime(times[0])\r\n  checkIsSametime(times[1])\r\n  if (isSameTime) {\r\n    return 0\r\n  }\r\n\r\n  //找不同的，取得差值\r\n  let result = []\r\n  times.forEach((time, index) => {\r\n    const newArray = times.filter(item => item !== time)\r\n    for (let i = 0; i &#x3C; newArray.length; i++) {\r\n      const timeA = changeToDate(time)\r\n      const timeB = changeToDate(newArray[i])\r\n      let distance = Math.abs(changeToMinute(timeA - timeB))\r\n      //判斷是否時鐘反向距離比較短\r\n      if (distance > (24 * 60) / 2) {\r\n        distance = 24 * 60 - distance\r\n      }\r\n      if (result.length !== 0) {\r\n        if (distance &#x3C; result[0]) {\r\n          result.pop()\r\n          result.push(distance)\r\n        }\r\n      } else {\r\n        result.push(distance)\r\n      }\r\n    }\r\n  })\r\n  return result\r\n}\n</code></pre>\n<h3>課程的解法</h3>\n<p>課程比較聰明，把時間換成時鐘面，並把一天內的每一分鐘分別由 1~1440 排序，並依序算出他們的間隔分鐘數。</p>\n<pre><code class=\"language-js\">var timeDifference = function (times) {\r\n  var min = 720 // max difference\r\n  times.forEach((t, i) => {\r\n    //換成分鐘數\r\n    let [h, m] = t.split(\":\")\r\n    times[i] = +h * 60 + +m\r\n  })\r\n  times.sort((a, b) => a - b) //昇冪排列\r\n  for (let i = 1; i &#x3C; times.length; i++) {\r\n    //依序計算最小間隔\r\n    let diff = times[i] - times[i - 1]\r\n    diff = diff > 720 ? 1440 - diff : diff\r\n    min = diff &#x3C; min ? diff : min\r\n  }\r\n  let diff = times[times.length - 1] - times[0] //算最前和最後的時間間隔\r\n  diff = diff > 720 ? 1440 - diff : diff\r\n  min = diff &#x3C; min ? diff : min\r\n  return min\r\n}\n</code></pre>\n<h3>心得</h3>\n<ul>\n<li>學到了 sort() 的用法，除了可以直接排序陣列外(依轉換為字串後的 unicode 排序)，也可以傳入 function 決定排序方法。</li>\n</ul>\n<pre><code class=\"language-js\">array.sort((a, b) => {\r\n  a - b //昇冪排列，反過來變 b-a 就是降冪排列\r\n})\n</code></pre>\n<ul>\n<li>一開始要先釐清輸入輸出的範圍，像我一開始解題就預設輸入的時間裡面不會有相同的值，就會產生錯的演算法。</li>\n</ul>","frontmatter":{"title":"[演算法]Find Minimum Time Difference"}}},"pageContext":{"slug":"/[演算法]Find Minimum Time Difference/"}},"staticQueryHashes":[]}