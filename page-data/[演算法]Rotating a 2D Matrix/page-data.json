{"componentChunkName":"component---src-templates-post-js","path":"/[演算法]Rotating a 2D Matrix/","result":{"data":{"markdownRemark":{"html":"<h3>題目</h3>\n<p>給一個 square matrix (nxn) 將該 matrix 順時鐘轉 90 度後回傳。\r\n例如:</p>\n<ul>\n<li>input</li>\n</ul>\n<pre><code class=\"language-js\">;[\r\n  [1, 2, 3],\r\n  [4, 5, 6],\r\n  [7, 8, 9],\r\n]\n</code></pre>\n<ul>\n<li>output</li>\n</ul>\n<pre><code class=\"language-js\">;[\r\n  [7, 4, 1],\r\n  [8, 5, 2],\r\n  [9, 6, 3],\r\n]\n</code></pre>\n<h3>自己的解法</h3>\n<p>這題其實想了一個禮拜 D，看了題目後沒頭緒就放著，後來想到說其實他就是轉 90 度，那我只要把轉九十度以後的順序依序放入三個空陣列就好。</p>\n<pre><code class=\"language-js\">function rotate(array) {\r\n  //建立新的 array\r\n  let newArray = new Array()\r\n  //依序放入空陣列\r\n  for (let i = 0; i &#x3C; array.length; i++) {\r\n    newArray.push([])\r\n  }\r\n  //依序放入item\r\n  for (let i = 0; i &#x3C; array.length; i++) {\r\n    for (let j = 0; j &#x3C; array.length; j++) {\r\n      newArray[j].push(array[array.length - 1 - i][j])\r\n    }\r\n  }\r\n  return newArray\r\n}\n</code></pre>\n<h3>課程的解法</h3>\n<p>課程的解法比較是用實際上把每個數字個別做 rotate，先把每個位置的 [indexX][indexy]給找出來，然後把位移後的位置置入準備放入的數字，做 n2 loop。</p>\n<pre><code class=\"language-js\">const rotate = matrix => {\r\n  const size = matrix.length - 1\r\n\r\n  for (let layer = 0; layer &#x3C; Math.floor(matrix.length / 2); layer++) {\r\n    for (let i = layer; i &#x3C; size - layer; i++) {\r\n      const topFence = matrix[layer][i] // starts at top left of layer\r\n      const rightFence = matrix[i][size - layer] // starts at top right of layer\r\n      const bottomFence = matrix[size - layer][size - i] // starts at bottom right of layer\r\n      const leftFence = matrix[size - i][layer] // starts at bottom left of layer\r\n\r\n      // rotate 90 degrees clockwise element by element\r\n      matrix[layer][i] = leftFence // set value walking top fence\r\n      matrix[i][size - layer] = topFence // set value walking right fence\r\n      matrix[size - layer][size - i] = rightFence // set value walking bottom fence\r\n      matrix[size - i][layer] = bottomFence // set value walking left fence\r\n    }\r\n  }\r\n\r\n  return matrix\r\n}\n</code></pre>\n<h3>心得</h3>\n<ul>\n<li>其實解法對我而言很不直觀，光是理解 code 的邏輯就花了不少力氣。不過我覺得自己的解法比較無法通用於各個題型，僅是針對這個問題的速解。而課程的解法示範了如何用演算法執行二維陣列的變形。</li>\n<li>兩個解法的複雜度都是 O(n)。</li>\n</ul>","frontmatter":{"title":"[演算法]Rotating a 2D Matrix"}}},"pageContext":{"slug":"/[演算法]Rotating a 2D Matrix/"}},"staticQueryHashes":[]}