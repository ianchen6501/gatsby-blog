{"componentChunkName":"component---src-templates-post-js","path":"/[演算法]The 3 sum problem/","result":{"data":{"markdownRemark":{"html":"<h3>題目</h3>\n<p>給定一個 array 包含不定數量的 integers，回傳三個 integers 一組的 array，這三個 integers 必須相加為 0，回傳的 arrays 不得重複。</p>\n<p>例如:</p>\n<pre><code class=\"language-js\">Input: [-3, -1, 1, 0, 2, 10, -2, 8]\r\n\r\nOutput: [\r\n  [-3, 1, 2],\r\n  [-2, 0, 2],\r\n  [-1, 0, 1],\r\n]\n</code></pre>\n<h3>解題思路</h3>\n<p>這一題一開始整個卡在 three sum 這件事情，想說這樣不就要用到 O(n3) 的複雜度，太不合理了。</p>\n<p>後來偷看了一下課程的說明，提示應該先解 two sum</p>\n<pre><code class=\"language-js\">function twoSum(input) {\r\n  //initially sort the array\r\n  let array = input.sort((x, y) => {\r\n    return x - y\r\n  })\r\n  let a = 0\r\n  let b = array.length - 1\r\n  let result = []\r\n  //traverse array\r\n  while (a &#x3C; b) {\r\n    //match case\r\n    const sum = array[a] + array[b]\r\n    if (sum === 0) {\r\n      result.push([array[a], array[b]])\r\n      //handle similar array[a] and array[b]\r\n      while (array[a] === array[a + 1]) {\r\n        a++\r\n      }\r\n      a++\r\n      while (array[b] === array[b - 1]) {\r\n        b--\r\n      }\r\n      b--\r\n    } else if (sum &#x3C; 0) {\r\n      a++\r\n    } else {\r\n      b--\r\n    }\r\n  }\r\n  return result\r\n}\n</code></pre>\n<p>上面是 two sum 的解法，</p>\n<ol>\n<li>先把輸入的 array 排序成類似 <code>[-2, -1, 0, 1]</code> 這樣的狀態</li>\n<li>利用前後各一個 pointer，遍歷比對兩個 pointer 指到的數和是否等於 0 ，如果和 &#x3C; 0 那表示左側的 pointer 應該向右移(數值變大)，乳果和 &#x3C;0 那右側的的 pointer 應該向左移(數值變小)。</li>\n<li>當遍歷完所有數值後，就找到相加等於零的組合了。\r\n<img src=\"https://i.imgur.com/sCf4o6k.png\" alt=\"\">\r\n回到題目本身，解決了 two sum 之後，只要把輸入的陣列每一個值分別做 two sum 的演算(相加等於該數值)，就可以把 three sum 要找的數值組合找出來。\r\n<img src=\"https://i.imgur.com/RCq4LUO.png\" alt=\"\"></li>\n</ol>\n<h3>完整解法</h3>\n<pre><code class=\"language-js\">const threeSum = A => {\r\n  //make an empty list to store the answer\r\n  let reusult = []\r\n  A.sort((a, b) => {\r\n    return a - b\r\n  })\r\n  for (let i = 0; i &#x3C; A.length; i++) {\r\n    //pointer\r\n    let j = i + 1\r\n    let k = A.length - 1\r\n    //traverse all the index less than the second index\r\n    while (j &#x3C; k) {\r\n      const sum = A[i] + A[j] + A[k]\r\n      if (sum === 0) {\r\n        reusult.push([A[i], A[j], A[k]])\r\n        //this will handle A[j] with simillar value\r\n        while (A[j] === A[j + 1]) {\r\n          j++\r\n        }\r\n        j++\r\n        //this will handle A[k] with simillar value\r\n        while (A[k] === A[k - 1]) {\r\n          k--\r\n        }\r\n        k--\r\n        //if sum &#x3C; 0 make jth pointer should move right to increse sum\r\n      } else if (sum &#x3C; 0) {\r\n        j++\r\n        //if sum > 0 make jth pointer should move left to decrease sum\r\n      } else {\r\n        k--\r\n      }\r\n    }\r\n    //this will handle A[i] with simillar value\r\n    while (A[i] === A[i + 1]) {\r\n      i++\r\n    }\r\n  }\r\n  return reusult\r\n}\n</code></pre>\n<h3>補充</h3>\n<ul>\n<li>\n<p>注意使用的 array 方法是會產生新的 array ，還是會改到原本的 array</p>\n<p>| 會改到原本的 array 的 method:<br>\npush()、pop()、shift()、sort()、splice()、reverse() 等</p>\n<p>| 會產生新的 array 的 method:\r\njoin()、concat()、slice()、map()、filter()、reduce()、toString()、from()、of() 等</p>\n</li>\n<li>\n<p>.forEach 中斷問題\r\nㄧ般在 for、while 等 loop 可以透過 <code>break</code> 來中斷(<code>continue</code> 跳過下一次 iteration)，但 <code>.forEach()</code> 如果用 <code>break</code> 會出現 <code>illegal breack statement</code> error，有兩種方法可以解決</p>\n</li>\n</ul>\n<ol>\n<li>利用 try、catch</li>\n</ol>\n<pre><code class=\"language-js\">try {\r\n  var a = [\"one\", \"two\", \"three\"]\r\n  a.forEach((item, index) => {\r\n    if (item === \"two\") {\r\n      throw \"ending\" //stop the try function\r\n    } else {\r\n      console.log(item)\r\n    }\r\n  })\r\n} catch (e) {\r\n  console.log(e)\r\n  if (e === \"ending\") {\r\n    console.log(\"結束\")\r\n  } else {\r\n    console.log(e)\r\n  }\r\n}\n</code></pre>\n<ol start=\"2\">\n<li>利用 <code>.some()</code> 或 <code>.every()</code> method</li>\n</ol>\n<pre><code class=\"language-js\">//some method\r\nconst array = [1, 2, 3, 4, 5]\r\narray.some(item => {\r\n  if (item === 4) {\r\n    return true //return true 的時候跳脫\r\n  }\r\n  console.log(item)\r\n})\r\n//1\r\n//2\r\n//3\n</code></pre>\n<pre><code class=\"language-js\">//every method\r\nconst array = [1, 2, 3, 4, 5]\r\narray.find(item => {\r\n  if (item > 4) {\r\n    return false\r\n  } else {\r\n    console.log(item)\r\n  }\r\n})\n</code></pre>\n<h3>reference</h3>\n<p>(JavaScript Array 陣列操作方法大全 ( 含 ES6 ))[<a href=\"https://www.oxxostudio.tw/articles/201908/js-array.html\">https://www.oxxostudio.tw/articles/201908/js-array.html</a>]\r\n(JS 中 arr.forEach()如何跳出迴圈)[https://www.itread01.com/content/1544746721.html]</p>","frontmatter":{"title":"[演算法] The 3 sum problem"}}},"pageContext":{"slug":"/[演算法]The 3 sum problem/"}},"staticQueryHashes":[]}