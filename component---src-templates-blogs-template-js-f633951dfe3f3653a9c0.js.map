{"version":3,"sources":["webpack://gatsby-starter-hello-world/./src/templates/blogs_template.js"],"names":["Wrapper","styled","PostContainer","PostTitle","P","PostDate","PaginatorContainer","PaginatorLink","prop","$disalbe","FilterContainer","FilterName","NavLink","props","test","text","to","url","pageContext","group","location","index","first","last","pageCount","previousUrl","toString","nextUrl","pagesArray","i","push","console","log","newGroup","filter","groupNode","node","frontmatter","category","map","key","fields","slug","title","date","excerpt","pageNumber"],"mappings":"gMAMMA,EAAUC,oBAAH,mEAAGA,CAAH,2FAQPC,EAAgBD,oBAAH,yEAAGA,CAAH,yHASbE,EAAYF,mBAAH,qEAAGA,CAAH,wBAITG,EAAIH,kBAAH,6DAAGA,CAAH,gEAKDI,EAAWJ,mBAAH,oEAAGA,CAAH,8BAKRK,EAAqBL,oBAAH,8EAAGA,CAAH,gEAOlBM,EAAgBN,oBAAH,yEAAGA,CAAH,mEAKf,SAAAO,GAAI,OAAIA,EAAKC,UAAL,oBAGNC,EAAkBT,oBAAH,2EAAGA,CAAH,MAEfU,EAAaV,qBAAH,sEAAGA,CAAH,qDAQVW,EAAU,SAAAC,GACd,OAAKA,EAAMC,KAOF,gBAACP,EAAD,CAAeE,UAAU,GAAOI,EAAME,MAL3C,gBAAC,KAAD,CAAMC,GAAIH,EAAMI,KACd,gBAACV,EAAD,CAAeE,UAAU,GAAQI,EAAME,QAgE/C,UAxDkB,SAAC,GAKjB,IALgD,IAA7BG,EAA4B,EAA5BA,YACXC,GADuC,EAAfC,SACiBF,EAAzCC,OAAOE,EAAkCH,EAAlCG,MAAOC,EAA2BJ,EAA3BI,MAAOC,EAAoBL,EAApBK,KAAMC,EAAcN,EAAdM,UAC7BC,EAAcJ,EAAQ,GAAM,EAAI,cAAgBA,EAAQ,GAAGK,WAC3DC,GAAWN,EAAQ,GAAGK,WACtBE,EAAa,GACVC,EAAI,EAAGA,GAAKL,EAAWK,IAC9BD,EAAWE,KAAKD,GAGlBE,QAAQC,IAAIb,GACZ,IAAMc,EAAWd,EAAMe,QAAO,SAAAC,GAE5B,GADAJ,QAAQC,IAAIG,GACgC,cAAxCA,EAAUC,KAAKC,YAAYC,SAC7B,OAAOH,KAKX,OAFAJ,QAAQC,IAAIC,GAGV,gBAAC,IAAD,KACE,gBAACjC,EAAD,KACE,gBAACU,EAAD,KAba,CAAC,MAAO,KAAM,KAAM,MAcnB6B,KAAI,SAAAL,GAAM,OACpB,gBAACvB,EAAD,KAAauB,OAGhBf,EAAMoB,KAAI,gBAAGH,EAAH,EAAGA,KAAH,OACT,gBAAClC,EAAD,CAAesC,IAAKJ,EAAKK,OAAOC,MAC9B,2BACE,gBAAC,KAAD,CAAM1B,GAAIoB,EAAKK,OAAOC,MACpB,gBAACvC,EAAD,KAAYiC,EAAKC,YAAYM,QAE/B,gBAACtC,EAAD,KAAW+B,EAAKC,YAAYO,OAE9B,gBAACxC,EAAD,KAAIgC,EAAKS,aAGb,gBAACvC,EAAD,KACE,gBAACM,EAAD,CAASE,KAAMQ,EAAOL,IAAKQ,EAAaV,KAAK,SAC5Ca,EAAWW,KAAI,SAAAO,GACd,OACE,gBAAClC,EAAD,CACEE,KAAMgC,IAAezB,EACrBN,KAAM+B,EAAWpB,WACjBT,IACiB,IAAf6B,EAAA,2BAAgDA,OAKxD,gBAAClC,EAAD,CAASE,KAAMS,EAAMN,IAAKU,EAASZ,KAAK","file":"component---src-templates-blogs-template-js-f633951dfe3f3653a9c0.js","sourcesContent":["import { graphql } from \"gatsby\"\r\nimport React from \"react\"\r\nimport Link from \"gatsby-link\"\r\nimport styled from \"styled-components\"\r\nimport Layout from \"../components/layout\"\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  height: calc(100% - 30px);\r\n  width: 80%;\r\n  margin: 0 auto;\r\n  padding-top: 100px;\r\n`\r\n\r\nconst PostContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 10px 0px;\r\n  padding: 10px 20px;\r\n  border-radius: 10px;\r\n  background-color: gainsboro;\r\n`\r\n\r\nconst PostTitle = styled.h4`\r\n  margin-right: 20px;\r\n`\r\n\r\nconst P = styled.p`\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`\r\nconst PostDate = styled.h5`\r\n  float: right;\r\n  color: white;\r\n`\r\n\r\nconst PaginatorContainer = styled.div`\r\n  width: 100%;\r\n  position: absolute;\r\n  bottom: 0px;\r\n  text-align: center;\r\n`\r\n\r\nconst PaginatorLink = styled.div`\r\n  display: inline-block;\r\n  font-size: 20px;\r\n  padding: 0 10px 0 10px;\r\n\r\n  ${prop => prop.$disalbe && `color: #aaaaaa`}\r\n`\r\n\r\nconst FilterContainer = styled.div``\r\n\r\nconst FilterName = styled.span`\r\n  margin-right: 20px;\r\n  &:last-child {\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\n// pagination nav\r\nconst NavLink = props => {\r\n  if (!props.test) {\r\n    return (\r\n      <Link to={props.url}>\r\n        <PaginatorLink $disalbe={false}>{props.text}</PaginatorLink>\r\n      </Link>\r\n    )\r\n  } else {\r\n    return <PaginatorLink $disalbe={true}>{props.text}</PaginatorLink>\r\n  }\r\n}\r\n\r\nconst blogsPage = ({ pageContext, location }) => {\r\n  const { group, index, first, last, pageCount } = pageContext\r\n  const previousUrl = index - 1 === 1 ? \"/blog-list\" : (index - 1).toString()\r\n  const nextUrl = (index + 1).toString()\r\n  const pagesArray = []\r\n  for (let i = 1; i <= pageCount; i++) {\r\n    pagesArray.push(i)\r\n  }\r\n  const filtersMap = [\"演算法\", \"日記\", \"筆記\", \"心得\"]\r\n  console.log(group)\r\n  const newGroup = group.filter(groupNode => {\r\n    console.log(groupNode)\r\n    if (groupNode.node.frontmatter.category === \"algorythm\") {\r\n      return groupNode\r\n    }\r\n  })\r\n  console.log(newGroup)\r\n\r\n  return (\r\n    <Layout>\r\n      <Wrapper>\r\n        <FilterContainer>\r\n          {filtersMap.map(filter => (\r\n            <FilterName>{filter}</FilterName>\r\n          ))}\r\n        </FilterContainer>\r\n        {group.map(({ node }) => (\r\n          <PostContainer key={node.fields.slug}>\r\n            <div>\r\n              <Link to={node.fields.slug}>\r\n                <PostTitle>{node.frontmatter.title}</PostTitle>\r\n              </Link>\r\n              <PostDate>{node.frontmatter.date}</PostDate>\r\n            </div>\r\n            <P>{node.excerpt}</P>\r\n          </PostContainer>\r\n        ))}\r\n        <PaginatorContainer>\r\n          <NavLink test={first} url={previousUrl} text=\"PREV\" />\r\n          {pagesArray.map(pageNumber => {\r\n            return (\r\n              <NavLink\r\n                test={pageNumber === index ? true : false}\r\n                text={pageNumber.toString()}\r\n                url={\r\n                  pageNumber === 1 ? `/blog-list` : `/blog-list/${pageNumber}`\r\n                }\r\n              />\r\n            )\r\n          })}\r\n          <NavLink test={last} url={nextUrl} text=\"NEXT\" />\r\n        </PaginatorContainer>\r\n      </Wrapper>\r\n    </Layout>\r\n  )\r\n}\r\nexport default blogsPage\r\n\r\nexport const query = graphql`\r\n  {\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: frontmatter___date }\r\n      filter: { frontmatter: { category: { eq: \"algorythm\" } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            date\r\n            title\r\n            category\r\n          }\r\n          excerpt\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}